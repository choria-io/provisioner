<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configuration on Choria Provisioner</title><link>https://choria-io.github.io/provisioner/configuration/index.html</link><description>Recent content in Configuration on Choria Provisioner</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://choria-io.github.io/provisioner/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Server Setup</title><link>https://choria-io.github.io/provisioner/configuration/server/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/provisioner/configuration/server/index.html</guid><description>The Choria Server has the required RPC Agent embedded and is ready to be used in a Provisioner managed network but it is disabled by default. Custom binaries can enable provisioning at compile time for an always-on experience.
Provisioning is enabled in the Open Source server by means of a JWT token that you create and place on the server. The JWT token holds all of the information the server needs to find it&amp;rsquo;s provisioning server and will present that token also to the provisioning server for authentication.</description></item><item><title>Broker Setup</title><link>https://choria-io.github.io/provisioner/configuration/broker/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/provisioner/configuration/broker/index.html</guid><description>Choria Broker supports a concept called an Account or Organization, these are like a VLAN on your network switches.
Nodes partitioned into one Organization cannot communicate with nodes in any other Organizations unless special arrangements are made to facilitate that.
We use this feature to create an isolated network where unprovisioned servers wait for provisioning. When Choria Provisioner connects using fully verified credentials it gains access to these isolated Servers and can provision them.</description></item><item><title>Writing a Helper</title><link>https://choria-io.github.io/provisioner/configuration/helper/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/provisioner/configuration/helper/index.html</guid><description>The Helper is a script or program written in any language that is in charge of handling the steps that are unique to your environment.
Essentially it receives Server Metadata on its STDIN and writes a response to STDOUT that is used to configure the server.
See the sections below for sample Helper scripts.
Input Let&amp;rsquo;s look at what you might receive as input on STDIN. The specifics will vary a bit between scenarios which we will call out in specific sections.</description></item><item><title>Configuration File</title><link>https://choria-io.github.io/provisioner/configuration/provisioner/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/provisioner/configuration/provisioner/index.html</guid><description>Provisioner is configured using /etc/choria-provisioner/choria-provisioner.yaml typically. It&amp;rsquo;s a YAML format file with a few required settings and a number of optional ones. Changes to the file requires the process to be restarted.
Choria Client Configuration As the Provisioner connects to the Choria Broker as a client it needs a configuration that allows it access. Create /etc/choria-provisioner/choria.cfg with the following based on needs. These settings will augment those in /etc/choria/client.cfg.
x509 based Networks plugin.</description></item></channel></rss>