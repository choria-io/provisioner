<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Choria Provisioner</title><link>https://choria-io.github.io/provisioner/index.html</link><description>Recent content on Choria Provisioner</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://choria-io.github.io/provisioner/index.xml" rel="self" type="application/rss+xml"/><item><title>Installation</title><link>https://choria-io.github.io/provisioner/installtion/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/provisioner/installtion/index.html</guid><description>We distribute an RPM or Docker container for the Provisioner package. Debian is not supported at present.
YUM Repository For RPMs we publish releases but also nightly builds to our repositories.
Users of our Puppet modules will already have these repositories available.
Release [choria_release] name=Choria Orchestrator Releases mirrorlist=http://mirrorlists.choria.io/yum/release/el/$releasever/$basearch.txt enabled=True gpgcheck=True repo_gpgcheck=True gpgkey=https://choria.io/RELEASE-GPG-KEY metadata_expire=300 sslcacert=/etc/pki/tls/certs/ca-bundle.crt sslverify=True Nightly Nightly releases are named and versioned choria-provisioner-0.99.0.20221109-1.el7.x86_64.rpm where the last part of the version is the date.</description></item><item><title>Configuration</title><link>https://choria-io.github.io/provisioner/configuration/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/provisioner/configuration/index.html</guid><description>Configuring the Provisioner requires exact knowledge of your deployment needs, we suggest you start with first configuring servers by hand while exploring your needs, once the specific configuration file contents and security needs are defined those can be configured into the Provisioner system.
Deploying a Provisioner should not be the first thing you do.
General Requirements Choria Broker You must be running the Choria Broker and it will need a few extra configuration items.</description></item><item><title>Fleet Management</title><link>https://choria-io.github.io/provisioner/managing/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/provisioner/managing/index.html</guid><description>Choria Server that is enabled for Provisioning expose a number of endpoints that can be used to interact with it in ways that is not otherwise possible.
Warning These features are almost all extremely dangerous and should be used with great caution.
These abilities are not possible without enabling Provisioning in the server, so they are off by default. You should ensure your site security policies have adequate control over these actions.</description></item><item><title>Monitoring</title><link>https://choria-io.github.io/provisioner/monitoring/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/provisioner/monitoring/index.html</guid><description>Watching the Provisioning Process Choria Servers publish lifecycle events, these can be viewed using choria tool event --component provision_mode_server.
Servers will publish startup, shutdown and provisioned events that will be shown in the rolling display. These lifecycle events are published in JSON mode on the network and could be stored in a Stream for analysis.
$ choria tool event --component provision_mode_server Waiting for events from topic choria.lifecycle.event.&amp;gt; on nats://broker.choria.local:4222 14:35:46 [startup] n1.</description></item></channel></rss>